local function augroup(name)
  return vim.api.nvim_create_augroup("custom_" .. name, { clear = true })
end

-- go to last loc when opening a buffer
vim.api.nvim_create_autocmd("BufReadPost", {
  group = augroup("last_loc"),
  callback = function(event)
    local exclude = { "gitcommit" }
    local buf = event.buf
    if vim.tbl_contains(exclude, vim.bo[buf].filetype) or vim.b[buf].lazyvim_last_loc then
      return
    end
    vim.b[buf].lazyvim_last_loc = true
    local mark = vim.api.nvim_buf_get_mark(buf, '"')
    local lcount = vim.api.nvim_buf_line_count(buf)
    if mark[1] > 0 and mark[1] <= lcount then
      pcall(vim.api.nvim_win_set_cursor, 0, mark)
    end
  end,
  desc = "Go to last location when opening a buffer",
})

-- highlight on yank
vim.api.nvim_create_autocmd("TextYankPost", {
  group = augroup("highlight_yank"),
  callback = function()
    vim.highlight.on_yank()
  end,
  desc = "Highlight on yank",
})

vim.api.nvim_create_autocmd("FileType", {
  group = augroup("filetype_text"),
  pattern = "text",
  callback = function()
    vim.opt_local.textwidth = 78
  end,
  desc = "Enable wrap in text files",
})

vim.api.nvim_create_autocmd({ "BufNewFile", "BufRead" }, {
  group = augroup("filetype_iptables"),
  callback = function()
    if vim.fn.getline(1):match("^# Generated by iptables") then
      vim.bo.filetype = "iptables"
    end
  end,
  desc = "Set iptables filetype",
})

-- close some filetypes with <q>
vim.api.nvim_create_autocmd("FileType", {
  group = augroup("close_with_q"),
  pattern = {
    "fugitiveblame",
    "neotest-output",
    "neotest-output-panel",
    "neotest-summary",
    "qf",
  },
  callback = function(event)
    vim.bo[event.buf].buflisted = false
    vim.keymap.set("n", "q", "<cmd>close<cr>", {
      buffer = event.buf,
      silent = true,
      desc = "Quit buffer",
    })
  end,
  desc = "Close some filetypes with <q>",
})

-- enter insert mode when switching to terminal buffer
vim.api.nvim_create_autocmd({ "TermOpen", "BufEnter" }, {
  group = augroup("terminal_insert"),
  pattern = { "term://*" },
  callback = function()
    local windows = vim.api.nvim_tabpage_list_wins(0)
    if #windows > 1 and vim.opt.buftype:get() == "terminal" then
      vim.cmd.startinsert()
    end
  end,
  desc = "enter insert mode when switching to terminal buffer",
})

local sync_colors = augroup("sync_colors")
vim.api.nvim_create_autocmd({ "UIEnter", "ColorScheme" }, {
  group = sync_colors,
  callback = function()
    local normal = vim.api.nvim_get_hl(0, { name = "Normal" })
    if not normal.bg then
      return
    end
    if vim.env.TMUX then
      io.write(string.format("\027Ptmux;\027\027]11;#%06x\007\027\\", normal.bg))
      io.write(string.format("\027Ptmux;\027\027]10;#%06x\007\027\\", normal.fg))
    else
      io.write(string.format("\027]11;#%06x\027\\", normal.bg))
      io.write(string.format("\027]10;#%06x\027\\", normal.fg))
    end
  end,
  desc = "Sync text and background colors to the terminal",
})

vim.api.nvim_create_autocmd("UILeave", {
  group = sync_colors,
  callback = function()
    if vim.env.TMUX then
      io.write("\027Ptmux;\027\027]111;\007\027\\")
      io.write("\027Ptmux;\027\027]110;\007\027\\")
    else
      io.write("\027]111\027\\")
      io.write("\027]110\027\\")
    end
  end,
  desc = "Restore default foreground and background colors to terminal",
})
